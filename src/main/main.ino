#include <UMS3.h>

#include "spi.h"
#include "define.h"

#include <BleConnectionStatus.h>
#include <BleMouse.h>

SPI spi();
BleMouse bleMouse("InkSync", "The InkSync Boys", 100);
char buffer[64];

void setup() {
  Serial.begin(115200);
  spi.init();

  // haven't tested this yet
  // int status = initOpticalSensor();
  // if (status == -1)
  // { 
  //   Serial.println("Incorrect product ID during initialization!"); 
  //   ESP.restart(); 
  // }
  // else if (status != 0)
  // { 
  //   sprintf(buffer, "Initialization failed at step %d", status);
  //   Serial.println(buffer);
  //   ESP.restart();
  // }

}

void loop() {


  // use WRITE_PROTECT register to test spi.write()
  uint8_t ret = spi.read(WRITE_PROTECT);
  sprintf(buffer, "WP = 0x%X", ret);
  Serial.println(buffer);

  while(1){
    delay(3000);
  }  
}

/*
Initializes the PAW3040 optical sensor.
See 7.1.3 and Table 11 in datasheet.

Returns:
     0 - successful initialization
    -1 - incorrect product_ID1
     n - initialization failed at step n
*/
int initOpticalSensor()
{
  if (spi.read(PRODUCT_ID1) != 0x31){ return -1; }

  uint8_t initAddresses[] = {0x7F,0x05,0x09,0x51,0x0D,0x0E,0x07,0x1B,0x2E,0x32,0x33,0x34,0x36,0x38,0x39,0x3E,0x44,0x4A,0x4F,0x52,0x57,0x59,0x5B,0x5C,0x7F,0x00,0x07,0x20,0x21,0x23,0x2F,0x37,0x3B,0x43,0x59,0x5A,0x5C,0x5E,0x7F,0x51,0x7F,0x05,0x06,0x07,0x08,0x7F,0x05,0x53,0x7F,0x00,0x09,0x0A,0x0B,0x0C,0x0D,0x12,0x14,0x16,0x18,0x19,0x1A,0x1B,0x20,0x22,0x24,0x26,0x2F,0x30,0x3D,0x3E,0x7F,0x34,0x7F,0x00,0x02,0x03,0x06,0x0F,0x14,0x35,0x36,0x46,0x47,0x4B,0x7F,0x09,0x4B,0x7F,0x09};
  uint8_t initValues[]    = {0x00,0xA8,0x5A,0x06,0x1F,0x1F,0x00,0x42,0x40,0x40,0x02,0x00,0xE0,0xA0,0x01,0x14,0x02,0xE0,0x02,0x0D,0x03,0x03,0x03,0xFF,0x01,0x25,0x78,0x00,0x40,0x00,0x64,0x30,0x64,0x0A,0x01,0x01,0x04,0x04,0x02,0x02,0x03,0x0C,0x0C,0x0C,0x0C,0x04,0x01,0x08,0x05,0x02,0x01,0x1C,0x24,0x1C,0x24,0x08,0x02,0x02,0x1C,0x24,0x1C,0x24,0x08,0x02,0x02,0x88,0x7C,0x07,0x00,0x98,0x06,0x03,0x07,0x01,0xC4,0x13,0x0C,0x0A,0x02,0x39,0x3F,0x03,0x0F,0x97,0x00,0x00,0x97,0x00,0x00};

  for (int i = 0; i < 86; i++)
  {
    spi.write(initAddresses[i], initValues[i]);

    if (initAddresses[i] != BANK_SWITCH)
    {
      // read back value to verify successful write
      if (spi.read(initAddresses[i]) != initValues[i]){ return i+1; }
    }
  }

  return 0;
}
